
#ifndef _GLQUAKE_H
#define _GLQUAKE_H

#include <GL/gl.h>
#include <GL/glu.h>

void GL_BeginRendering(int *x, int *y, int *width, int *height);
void GL_EndRendering();

extern int texture_extension_number;
extern int gl_filter_min;
extern int gl_filter_max;

extern float gldepthmin, gldepthmax;

void GL_Upload32(unsigned *data, int width, int height, bool mipmap, bool alpha);
void GL_Upload8(
	int *gl_texturenum,
	int *gl_brightnum,
	byte *data,
	int width,
	int height,
	byte *pal,
	int bytes,
	int colors,
	bool mipmap,
	bool alpha);
void GL_LoadTexture(
	int *gl_texturenum,
	int *gl_brightnum,
	char *identifier,
	int width,
	int height,
	byte *data,
	int bytes,
	int colors,
	byte *pal,
	bool mipmap,
	bool alpha);
int GL_FindTexture(char *identifier);

typedef struct
{
	float x, y, z;
	float s, t;
	float r, g, b;
} glvert_t;

extern glvert_t glv;

extern int glx, gly, glwidth, glheight;

#define TILE_SIZE 128 // size of textures generated by R_GenTiledSurf

#define SKYSHIFT 7
#define SKYSIZE (1 << SKYSHIFT)
#define SKYMASK (SKYSIZE - 1)

#define BACKFACE_EPSILON 0.01

void R_TimeRefresh_f();
void R_ReadPointFile_f();
texture_t *R_TextureAnimation(texture_t *base);

typedef struct surfcache_s
{
	struct surfcache_s *next;
	struct surfcache_s **owner; // NULL is an empty chunk of memory
	int lightadj[MAXLIGHTMAPS]; // checked for strobe flush
	int dlight;
	int size; // including header
	unsigned width;
	unsigned height; // DEBUG only needed for debug
	float mipscale;
	struct texture_s *texture; // checked for animating textures
	byte data[4];			   // width*height elements
} surfcache_t;

typedef enum
{
	pt_static,
	pt_grav,
	pt_slowgrav,
	pt_fire,
	pt_explode,
	pt_explode2,
	pt_blob,
	pt_blob2
} ptype_t;

typedef struct particle_s
{
	// driver-usable fields
	vec3_t org;
	float color;
	// drivers never touch the following fields
	struct particle_s *next;
	vec3_t vel;
	float ramp;
	float die;
	ptype_t type;
} particle_t;

//====================================================

extern entity_t r_worldentity;
extern vec3_t modelorg, r_entorigin;
extern entity_t *currententity;
extern int r_visframecount; // ??? what difs?
extern int r_framecount;
extern mplane_t frustum[4];
extern int c_brush_polys, c_alias_polys;

//
// view origin
//
extern vec3_t vup;
extern vec3_t vpn;
extern vec3_t vright;
extern vec3_t r_origin;

//
// screen size info
//
extern refdef_t r_refdef;
extern mleaf_t *r_viewleaf, *r_oldviewleaf;
extern int d_lightstylevalue[256]; // 8.8 fraction of base light value

extern int currenttexture;
extern int cnttextures[2];
extern int particletexture;
extern int playertextures;

extern int skytexturenum; // index in cl.loadmodel, not gl texture object

extern cvar_t r_norefresh;
extern cvar_t r_drawentities;
extern cvar_t r_drawworld;
extern cvar_t r_drawviewmodel;
extern cvar_t r_speeds;
extern cvar_t r_waterwarp;
extern cvar_t r_fullbright;
extern cvar_t r_lightmap;
extern cvar_t r_wateralpha;
extern cvar_t r_dynamic;
extern cvar_t r_novis;
extern cvar_t r_fence;
extern cvar_t r_luminescent;
extern cvar_t r_zmax;

extern cvar_t gl_clear;
extern cvar_t gl_cull;
extern cvar_t gl_poly;
extern cvar_t gl_texsort;
extern cvar_t gl_smoothmodels;
extern cvar_t gl_affinemodels;
extern cvar_t gl_polyblend;
extern cvar_t gl_keeptjunctions;
extern cvar_t gl_flashblend;
extern cvar_t gl_nocolors;

extern int gl_lightmap_format;
extern int gl_solid_format;
extern int gl_alpha_format;

extern cvar_t gl_max_size;
extern cvar_t gl_playermip;

extern float r_world_matrix[16];

extern const char *gl_vendor;
extern const char *gl_renderer;
extern const char *gl_version;
extern const char *gl_extensions;

void R_TranslatePlayerSkin(int playernum);
void GL_Bind(int texnum);

// Multitexture
#define TEXTURE0_SGIS 0x835E
#define TEXTURE1_SGIS 0x835F

#ifndef APIENTRY
#define APIENTRY
#endif

typedef void(APIENTRY *lpMTexFUNC)(GLenum, GLfloat, GLfloat);
typedef void(APIENTRY *lpSelTexFUNC)(GLenum);
extern lpMTexFUNC qglMTexCoord2fSGIS;
extern lpSelTexFUNC qglSelectTextureSGIS;

extern bool gl_mtexable;

void GL_DisableMultitexture();
void GL_EnableMultitexture();

#endif /* !_GLQUAKE_H */
